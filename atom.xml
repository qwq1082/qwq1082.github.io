<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>不一样的烟火</title>
  
  <subtitle>嗨~别来无恙</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-07-09T09:17:07.179Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>不一样的烟火</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>&#39;pikachu&#39;</title>
    <link href="http://yoursite.com/2019/07/09/pikachu/"/>
    <id>http://yoursite.com/2019/07/09/pikachu/</id>
    <published>2019-07-09T03:12:23.000Z</published>
    <updated>2019-07-09T09:17:07.179Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://qwq1082.github.io/2.gif" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;https://qwq1082.github.io/2.gif&quot; alt&gt;&lt;/p&gt;

      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>西瓜书习题3.3</title>
    <link href="http://yoursite.com/2019/07/08/%E8%A5%BF%E7%93%9C%E4%B9%A6%E4%B9%A0%E9%A2%983-3/"/>
    <id>http://yoursite.com/2019/07/08/西瓜书习题3-3/</id>
    <published>2019-07-08T13:41:33.000Z</published>
    <updated>2019-07-09T02:36:33.571Z</updated>
    
    <content type="html"><![CDATA[<h1 id="西瓜书习题-3-3"><a href="#西瓜书习题-3-3" class="headerlink" title="西瓜书习题 3.3"></a>西瓜书习题 3.3</h1><h2 id="编程实现对率回归，并给出西瓜数据集上的结果"><a href="#编程实现对率回归，并给出西瓜数据集上的结果" class="headerlink" title="编程实现对率回归，并给出西瓜数据集上的结果"></a>编程实现对率回归，并给出西瓜数据集上的结果</h2><p>西瓜数据集如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">ID  density  Sugar_content  label</span><br><span class="line"></span><br><span class="line">0    1    0.697         0.4600      1</span><br><span class="line">1    2    0.774         0.3760      1</span><br><span class="line">2    3    0.634         0.2640      1</span><br><span class="line">3    4    0.608         0.3180      1</span><br><span class="line">4    5    0.556         0.2150      1</span><br><span class="line">5    6    0.403         0.2370      1</span><br><span class="line">6    7    0.481         0.1490      1</span><br><span class="line">7    8    0.437         0.2110      1</span><br><span class="line">8    9    0.666         0.0910      0</span><br><span class="line">9   10    0.243         0.0267      0</span><br><span class="line">10  11    0.245         0.0570      0</span><br><span class="line">11  12    0.343         0.0990      0</span><br><span class="line">12  13    0.639         0.1610      0</span><br><span class="line">13  14    0.657         0.1980      0</span><br><span class="line">14  15    0.360         0.3700      0</span><br><span class="line">15  16    0.593         0.0420      0</span><br><span class="line">16  17    0.719         0.1030      0</span><br></pre></td></tr></table></figure><p>这题的关键就在于对对率回归的理解，附上对率回归的手写版公式推导过程：<br><img src="https://img-blog.csdnimg.cn/20190709100451704.jpg" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/20190709100605503.jpg" alt="在这里插入图片描述"></p><h4 id="推导RL的过程，得到了梯度公式，接下来用梯度上升算法实现RL（还有一种是用牛顿法实现，以后有时间在补充吧qwq-）"><a href="#推导RL的过程，得到了梯度公式，接下来用梯度上升算法实现RL（还有一种是用牛顿法实现，以后有时间在补充吧qwq-）" class="headerlink" title="推导RL的过程，得到了梯度公式，接下来用梯度上升算法实现RL（还有一种是用牛顿法实现，以后有时间在补充吧qwq~）"></a>推导RL的过程，得到了梯度公式，接下来用梯度上升算法实现RL（还有一种是用牛顿法实现，以后有时间在补充吧qwq~）</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#读取文件</span></span><br><span class="line">df = pd.read_csv(<span class="string">'watermelon3.0alpha.csv'</span>)</span><br><span class="line">print(df)</span><br><span class="line"><span class="comment">#方便矩阵运算，添一列1</span></span><br><span class="line">df[<span class="string">'one'</span>] = <span class="number">1.0</span></span><br><span class="line"><span class="comment">#将训练集装进矩阵</span></span><br><span class="line">train_X = np.mat(df[[<span class="string">'one'</span>,<span class="string">'density'</span>,<span class="string">'Sugar_content'</span>]])</span><br><span class="line"><span class="comment">#标签</span></span><br><span class="line">labels = np.mat(df[[<span class="string">'label'</span>]])</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#sigmoid函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sigmoid</span><span class="params">(z)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1.0</span>/(<span class="number">1.0</span> + np.exp(-z))</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#梯度上升算法</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">grad</span><span class="params">(train_X,labels,iters = <span class="number">2000</span>)</span>:</span></span><br><span class="line">    m,n = train_X.shape</span><br><span class="line">    <span class="comment">#步长alpha</span></span><br><span class="line">    alpha = <span class="number">0.05</span></span><br><span class="line">    <span class="comment">#初始化权重，全设为1</span></span><br><span class="line">    weights = np.ones((n,<span class="number">1</span>))</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#2000次迭代</span></span><br><span class="line">    <span class="keyword">for</span> k <span class="keyword">in</span> range(iters):</span><br><span class="line">        <span class="comment">#沿着梯度方向，向前移动，并更新权重</span></span><br><span class="line">        P = sigmoid(train_X.dot(weights))</span><br><span class="line">        error = labels - P</span><br><span class="line">        weights += alpha * np.dot(train_X.T,error)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> weights</span><br><span class="line"></span><br><span class="line"><span class="comment">#求出最优回归参数</span></span><br><span class="line">weights = grad(train_X,labels)</span><br><span class="line">print(weights)</span><br></pre></td></tr></table></figure><p>求得参数如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[[-3.12066518]</span><br><span class="line"> [ 0.76966008]</span><br><span class="line"> [13.22972573]]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#绘图</span></span><br><span class="line">x1,y1 = [],[]</span><br><span class="line">x2,y2 = [],[]</span><br><span class="line">x3,y3 = [],[]</span><br><span class="line">x4,y4 = [],[]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> range(train_X.shape[<span class="number">0</span>]):</span><br><span class="line">    <span class="keyword">if</span> labels[k] == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">if</span> sigmoid(np.dot(train_X[k,:],weights)) &gt;= <span class="number">0.5</span> :</span><br><span class="line">            x1.append(train_X[k,<span class="number">1</span>])</span><br><span class="line">            y1.append(train_X[k,<span class="number">2</span>])</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            x2.append(train_X[k,<span class="number">1</span>])</span><br><span class="line">            y2.append(train_X[k,<span class="number">2</span>]) </span><br><span class="line">    <span class="keyword">else</span>:  </span><br><span class="line">        <span class="keyword">if</span> sigmoid(np.dot(train_X[k,:],weights)) &lt; <span class="number">0.5</span> :</span><br><span class="line">            x3.append(train_X[k,<span class="number">1</span>])</span><br><span class="line">            y3.append(train_X[k,<span class="number">2</span>])</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            x4.append(train_X[k,<span class="number">1</span>])</span><br><span class="line">            y4.append(train_X[k,<span class="number">2</span>])</span><br><span class="line">            </span><br><span class="line">plt.scatter(x1,y1,s=<span class="number">30</span>,c=<span class="string">'red'</span>)</span><br><span class="line">plt.scatter(x2,y2,s=<span class="number">30</span>,c=<span class="string">'red'</span>,marker=<span class="string">'x'</span>)</span><br><span class="line">plt.scatter(x3,y3,s=<span class="number">30</span>,c=<span class="string">'green'</span>)</span><br><span class="line">plt.scatter(x4,y4,s=<span class="number">30</span>,c=<span class="string">'green'</span>,marker=<span class="string">'x'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#绘制直线    w0 + w1x1 +w2x2 = 0</span></span><br><span class="line">X = np.arange(<span class="number">0</span>,<span class="number">0.8</span>,<span class="number">0.01</span>)</span><br><span class="line">Y = -(weights[<span class="number">0</span>] + weights[<span class="number">1</span>] * X)/weights[<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">#总结：绘制直线用 plot ， 绘制散点 用scatrer</span></span><br><span class="line">plt.plot(X,Y)</span><br><span class="line"></span><br><span class="line">plt.xlabel(<span class="string">'Density'</span>)</span><br><span class="line">plt.ylabel(<span class="string">'Sugar_Content'</span>)</span><br><span class="line">plt.title(<span class="string">"LogisticRegression"</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/2019070910063746.png" alt="在这里插入图片描述"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;西瓜书习题-3-3&quot;&gt;&lt;a href=&quot;#西瓜书习题-3-3&quot; class=&quot;headerlink&quot; title=&quot;西瓜书习题 3.3&quot;&gt;&lt;/a&gt;西瓜书习题 3.3&lt;/h1&gt;&lt;h2 id=&quot;编程实现对率回归，并给出西瓜数据集上的结果&quot;&gt;&lt;a href=&quot;#编程实现
      
    
    </summary>
    
      <category term="ML" scheme="http://yoursite.com/categories/ML/"/>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
      <category term="MachineLearning" scheme="http://yoursite.com/tags/MachineLearning/"/>
    
      <category term="LR" scheme="http://yoursite.com/tags/LR/"/>
    
  </entry>
  
  <entry>
    <title>hiahiahia~</title>
    <link href="http://yoursite.com/2019/07/02/hiahiahia/"/>
    <id>http://yoursite.com/2019/07/02/hiahiahia/</id>
    <published>2019-07-02T06:00:09.000Z</published>
    <updated>2019-07-02T06:00:54.225Z</updated>
    
    <content type="html"><![CDATA[<p>哈哈哈哈哈</p><p>哈哈哈哈哈</p><p>哈哈哈哈哈</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;哈哈哈哈哈&lt;/p&gt;
&lt;p&gt;哈哈哈哈哈&lt;/p&gt;
&lt;p&gt;哈哈哈哈哈&lt;/p&gt;

      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>卷积神经网络的搭建</title>
    <link href="http://yoursite.com/2019/07/02/%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E7%9A%84%E6%90%AD%E5%BB%BA/"/>
    <id>http://yoursite.com/2019/07/02/卷积神经网络的搭建/</id>
    <published>2019-07-02T04:11:44.000Z</published>
    <updated>2019-07-02T04:12:34.131Z</updated>
    
    <content type="html"><![CDATA[<p><strong>卷积神经网络的搭建</strong></p><p><strong>1 预处理训练集与测试集图片</strong></p><p>说明：因为我们从网上下载的图片各种格式都有大小也不统一，所以图片的批量预处理是很必要的。 </p><p>（1）将图片大小统一修改成100*100，可参考下面代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">convertjpg</span><span class="params">(jpgfile,outdir,width=<span class="number">100</span>,height=<span class="number">100</span>)</span>:</span></span><br><span class="line">    img = Image.open(<span class="string">'C:/Users/ASUS/Desktop/cat/暹罗猫/'</span>+jpgfile)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        new_img = img.resize((width, height), Image.BILINEAR)</span><br><span class="line">        new_img.save(os.path.join(outdir, os.path.basename(jpgfile)))</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        print(e)</span><br><span class="line"><span class="keyword">for</span> jpgfile <span class="keyword">in</span> os.listdir(<span class="string">'C:/Users/ASUS/Desktop/cat/暹罗猫'</span>):</span><br><span class="line">    print(jpgfile)</span><br><span class="line">    convertjpg(jpgfile, <span class="string">"./Xianluo"</span>)</span><br></pre></td></tr></table></figure><p># 统一图片类型</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ranamesJPG</span><span class="params">(filepath, kind)</span>:</span>     images = os.listdir(filepath)     <span class="keyword">for</span> name <span class="keyword">in</span> images:         os.rename(filepath+name, filepath+kind+<span class="string">'_'</span>+name.split(<span class="string">'.'</span>)[<span class="number">0</span>]+<span class="string">'.jpg'</span>)         print(name)         print(name.split(<span class="string">'.'</span>)[<span class="number">0</span>]) ranamesJPG(<span class="string">'C:/Users/ASUS/Desktop/cat/英国短毛猫/'</span>,<span class="string">'3'</span>)</span><br></pre></td></tr></table></figure><p>这里有必要说明为什么要修改文件名？ </p><p>其实是这样的，因为训练集和测试集的图片一共有几百张，而我们训练时，不仅要传递图片，而且还要告诉卷积神经网络每一张图片对应的                    标签，如果手工添加标签的话，可想而知，会有很大的工作量。这里注明：0_xxx代表布偶猫、1_xxx代表孟买猫、2_xxx代表暹罗猫、3_xxx代表英国短毛猫。 </p><p>2 训练模型与测试</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> keras.utils <span class="keyword">import</span> np_utils</span><br><span class="line"><span class="keyword">from</span> keras.models <span class="keyword">import</span> Sequential</span><br><span class="line"><span class="keyword">from</span> keras.layers.core <span class="keyword">import</span> Dense, Dropout, Activation, Flatten</span><br><span class="line"><span class="keyword">from</span> keras.optimizers <span class="keyword">import</span> SGD, RMSprop, Adam</span><br><span class="line"><span class="keyword">from</span> keras.layers <span class="keyword">import</span> Conv2D, MaxPooling2D</span><br><span class="line"></span><br><span class="line"><span class="comment">#--------------------------------------------------------------------------------------------</span></span><br></pre></td></tr></table></figure><h1 id="将训练集图片转换成数组"><a href="#将训练集图片转换成数组" class="headerlink" title="将训练集图片转换成数组"></a>将训练集图片转换成数组</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">ima1 = os.listdir(<span class="string">'./cat/train'</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read_image1</span><span class="params">(filename)</span>:</span></span><br><span class="line">    img = Image.open(<span class="string">'./cat/train/'</span>+filename).convert(<span class="string">'RGB'</span>)</span><br><span class="line">    <span class="keyword">return</span> np.array(img)</span><br><span class="line"></span><br><span class="line">x_train = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> ima1:</span><br><span class="line">    x_train.append(read_image1(i))</span><br><span class="line"></span><br><span class="line">x_train = np.array(x_train)</span><br></pre></td></tr></table></figure><h1 id="根据文件名提取标签"><a href="#根据文件名提取标签" class="headerlink" title="根据文件名提取标签"></a>根据文件名提取标签</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">y_train = []</span><br><span class="line"><span class="keyword">for</span> filename <span class="keyword">in</span> ima1:</span><br><span class="line">    y_train.append(int(filename.split(<span class="string">'_'</span>)[<span class="number">0</span>]))</span><br><span class="line"></span><br><span class="line">y_train = np.array(y_train)</span><br></pre></td></tr></table></figure><h1 id="—————————————————————————————–"><a href="#—————————————————————————————–" class="headerlink" title="—————————————————————————————–"></a>—————————————————————————————–</h1><h1 id="将测试集图片转化成数组"><a href="#将测试集图片转化成数组" class="headerlink" title="将测试集图片转化成数组"></a>将测试集图片转化成数组</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">ima2 = os.listdir(<span class="string">'./cat/test'</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read_image2</span><span class="params">(filename)</span>:</span></span><br><span class="line">    img = Image.open(<span class="string">'./cat/test/'</span>+filename).convert(<span class="string">'RGB'</span>)</span><br><span class="line">    <span class="keyword">return</span> np.array(img)</span><br><span class="line"></span><br><span class="line">x_test = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> ima2:</span><br><span class="line">    x_test.append(read_image2(i))</span><br><span class="line"></span><br><span class="line">x_test = np.array(x_test)</span><br></pre></td></tr></table></figure><h1 id="根据文件名提取标签-1"><a href="#根据文件名提取标签-1" class="headerlink" title="根据文件名提取标签"></a>根据文件名提取标签</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">y_test = []</span><br><span class="line"><span class="keyword">for</span> filename <span class="keyword">in</span> ima2:</span><br><span class="line">    y_test.append(int(filename.split(<span class="string">'_'</span>)[<span class="number">0</span>]))</span><br><span class="line"></span><br><span class="line">y_test = np.array(y_test)</span><br><span class="line"><span class="comment">#-------------------------------------------------------------------------------------</span></span><br></pre></td></tr></table></figure><h1 id="将标签转换格式"><a href="#将标签转换格式" class="headerlink" title="将标签转换格式"></a>将标签转换格式</h1><p>y_train = np_utils.to_categorical(y_train)<br>y_test = np_utils.to_categorical(y_test)</p><h1 id="将特征点从0255转换成01提高特征提取精度"><a href="#将特征点从0255转换成01提高特征提取精度" class="headerlink" title="将特征点从0255转换成01提高特征提取精度"></a>将特征点从0<del>255转换成0</del>1提高特征提取精度</h1><p>x_train = x_train.astype(‘float32’)<br>x_test = x_test.astype(‘float32’)<br>x_train /= 255<br>x_test /= 255</p><h1 id="搭建卷积神经网络"><a href="#搭建卷积神经网络" class="headerlink" title="搭建卷积神经网络"></a>搭建卷积神经网络</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">model = Sequential()</span><br><span class="line">model.add(Conv2D(<span class="number">32</span>, (<span class="number">3</span>, <span class="number">3</span>), activation=<span class="string">'relu'</span>, input_shape=(<span class="number">100</span>, <span class="number">100</span>, <span class="number">3</span>)))</span><br><span class="line">model.add(Conv2D(<span class="number">32</span>, (<span class="number">3</span>, <span class="number">3</span>), activation=<span class="string">'relu'</span>))</span><br><span class="line">model.add(MaxPooling2D(pool_size=(<span class="number">2</span>, <span class="number">2</span>)))</span><br><span class="line">model.add(Dropout(<span class="number">0.25</span>))</span><br><span class="line"></span><br><span class="line">model.add(Conv2D(<span class="number">64</span>, (<span class="number">3</span>, <span class="number">3</span>), activation=<span class="string">'relu'</span>))</span><br><span class="line">model.add(Conv2D(<span class="number">64</span>, (<span class="number">3</span>, <span class="number">3</span>), activation=<span class="string">'relu'</span>))</span><br><span class="line">model.add(MaxPooling2D(pool_size=(<span class="number">2</span>, <span class="number">2</span>)))</span><br><span class="line">model.add(Dropout(<span class="number">0.25</span>))</span><br><span class="line"></span><br><span class="line">model.add(Flatten())</span><br><span class="line">model.add(Dense(<span class="number">256</span>, activation=<span class="string">'relu'</span>))</span><br><span class="line">model.add(Dropout(<span class="number">0.5</span>))</span><br><span class="line">model.add(Dense(<span class="number">4</span>, activation=<span class="string">'softmax'</span>))</span><br><span class="line"></span><br><span class="line">sgd = SGD(lr=<span class="number">0.01</span>, decay=<span class="number">1e-6</span>, momentum=<span class="number">0.9</span>, nesterov=<span class="literal">True</span>)</span><br><span class="line">model.compile(loss=<span class="string">'categorical_crossentropy'</span>, optimizer=sgd, metrics=[<span class="string">'accuracy'</span>])</span><br><span class="line"></span><br><span class="line">model.fit(x_train, y_train, batch_size=<span class="number">10</span>, epochs=<span class="number">32</span>)</span><br><span class="line">model.save_weights(<span class="string">'./cat/cat_weights.h5'</span>, overwrite=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">score = model.evaluate(x_test, y_test, batch_size=<span class="number">10</span>)</span><br><span class="line">print(score)</span><br></pre></td></tr></table></figure><p>注：需要安装h5py，用于保存和加载xx.h5类型的权重文件</p><p>直接右键run运行程序生成权重文件，用于以后的预测。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;卷积神经网络的搭建&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1 预处理训练集与测试集图片&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;说明：因为我们从网上下载的图片各种格式都有大小也不统一，所以图片的批量预处理是很必要的。 &lt;/p&gt;
&lt;p&gt;（1）将图片大小统一修
      
    
    </summary>
    
    
  </entry>
  
</feed>
